26c
var fieldset, field, interestLevel, newFormRow;
fieldset = page.getFieldset("coverageInformationSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Coverage Information");
field = fieldset.getField("CommlAutoLineBusiness_CommlRateState_id");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
}
field = fieldset.getField("AutoWrapCovInd");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);

1d94
	field.addRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Include SECURA Auto WRAP Coverage");
	field.updateHelpBubbleText("AutoWrapCovInd_fieldHelperBalloon", "fieldHelperBalloon", "Highlights of this coverage include:<br> •Employees as Insureds <br> •Limited Fellow Employee <br> •Employee Hired Autos <br> •Hired Auto Physical Damage <br> •Auto Loan Lease Gap <br> •Rental Reimbursement <br>", "200");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
field = fieldset.getField("HotRateState");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.addRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("State");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
fieldset = page.getFieldset("liabilityCoveragesSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Liability Coverage");
field = fieldset.getField("MarketSegmentValue");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
}
field = fieldset.getField("HiddenControllingState");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
}
field = fieldset.getField("OtherMarketSegmentNote");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.setValue("Note: $1,000,000 minimum liability limit is required if adding umbrella policy.");
	field.setStyleClass('alert alert-info');
}
field = fieldset.getField("PropertyDamageLiabilityDeductibleMessage");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.setValue("Note:  To add a Property Damage Liability Deductible for all vehicles, please make this selection for the Controlling State.");
	field.setStyleClass('alert alert-info');
}
field = fieldset.getField("LiabilityLimitCSL");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.addRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Combined Single Limit");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
field = fieldset.getField("hiddenPropertyDamageLiabilityDeductibleCheck");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(4);
}
field = fieldset.getField("hiddenPropertyDamageLiablityDeductibleAmount");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(4);
}
field = fieldset.getField("PropertyDamageLiabilityDeductibleCheck");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Property Damage Liability Deductible");
			field.removeValidations();
			field.resetValidationState();

}
fieldset = page.getFieldset("MedicalPaymentCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Medical Payment Coverage");
field = fieldset.getField("MedicalPaymentCheck");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Medical Payment");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("MedicalPaymentLimitEachPerson");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(4);
	field.addRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Limit, Each Person");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
fieldset = page.getFieldset("UninsuredMotoristCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Uninsured Motorist Coverage");
field = fieldset.getField("UninsuredMotorist");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(4);
	field.removeRequiredIndicator();
	field.setReadOnly(true);
	field.setLabelText("Uninsured Motorist");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("UninsuredMotoristCSLLimit");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.addRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Uninsured Motorist Limit");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
fieldset = page.getFieldset("UnderinsuredMotoristCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Underinsured Motorist Coverage");
field = fieldset.getField("UnderinsuredMotorist");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Underinsured Motorist");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("UnderinsuredMotoristLimitCSL");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(4);
	field.removeRequiredIndicator();
	field.setReadOnly(true);
	field.setLabelText("Underinsured Motorist Limit");
	field.updateHelpBubbleText("UnderinsuredMotoristLimitCSL_fieldHelperBalloon", "fieldHelperBalloon", "", "200");
			field.removeValidations();
			field.addValidation(new ap.Validation(field, 'validationLibrary.validation_required(this.getValue())', "This field is required", 'RequiredValidator'));
			field.resetValidationState();

}
fieldset = page.getFieldset("FullGlassCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(1);
fieldset = page.getFieldset("TortLimitationCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(1);
fieldset = page.getFieldset("PersonalInjuryProtectionCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestL
1899
evel(1);
fieldset = page.getFieldset("BroadenedPersonalInjuryProtectionCoveragSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(1);
fieldset = page.getFieldset("AdditionalPersonalInjuryProtectionCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(1);
fieldset = page.getFieldset("BasicFirstPartyBenefitCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(1);
fieldset = page.getFieldset("hiredAutoSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Hired Auto");
field = fieldset.getField("HiredAutoCoverage");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Hired Auto Coverage");
			field.removeValidations();
			field.resetValidationState();

}
fieldset = page.getFieldset("nonOwnedAutoSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Non-Owned Auto");
field = fieldset.getField("NonOwnedAutoCoverage");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Non-Owned Auto Coverage");
			field.removeValidations();
			field.resetValidationState();

}
fieldset = page.getFieldset("N15");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset = page.getFieldset("driveOtherCarCoverageSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Drive Other Car - DOC");
field = fieldset.getField("DOCCoverageTip");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.setValue("DOC coverages&#47;limits for Liability, UM&#47;UIM and Med Pay (as applicable) are the same as those selected for this state above.");
	field.setStyleClass('alert alert-info');
}
field = fieldset.getField("DocCoverage");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Drive Other Car Coverage");
	field.updateHelpBubbleText("DocCoverage_fieldHelperBalloon", "fieldHelperBalloon", "This endorsement provides coverage similar to that of the personal auto policy (PAP). The endorsement is commonly used when an executive officer is furnished with a company auto and does not carry personal auto insurance.", "200");
			field.removeValidations();
			field.resetValidationState();

}
fieldset = page.getFieldset("symbolsSection");
interestLevel = fieldset.getInterestLevel();
interestLevel.setInterestLevel(2);
fieldset.setLegend("Symbols");
field = fieldset.getField("SymbolsLiability");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Liability Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsMedicalPayments");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Medical Payments Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsUninsuredMotorist");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Uninsured Motorist Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsUnderinsuredMotorist");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Underinsured Motorist Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsTowingLabor");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Towing and Labor Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsComprehensive");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Comprehensive Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsSpecifiedCausesofLoss");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Specified Causes of Loss Symbol");
			field.removeValidations();
			field.resetValidationState();

}
field = fieldset.getField("SymbolsCollision");
if (field != null) { 
field.removeValidations();
	interestLevel = field.getInterestLevel();
	interestLevel.setInterestLevel(2);
	field.removeRequiredIndicator();
	field.setReadOnly(false);
	field.setLabelText("Collision Symbol");
			field.removeValidations();
			field.resetValidationState();

}
validationLibrary.validation_required = function validation_required(value) {
	return value.length > 0;

}

page.paint();
if(page.form) {page.form.setupHotFields();}
ap.ajaxMessageMap.clear();
ap.ajaxMessageMap.removeAlerts();
var message;
ap.ajaxMessageMap.render();

0


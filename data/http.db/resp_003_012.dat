var show_geninfo_multi_result_table = new Show_geninfo_multi_result_table();

/**
 * Shows results from a MultiResults table helper in the multi-results lightbox
 * Overrides & extends page.onPaint to bring up lightbox if AJAX-populated JSON field has data
 */
function Show_geninfo_multi_result_table() {
	
	var oldOnPaint = ap.page.onPaint;
	ap.page.onPaint = showTable;
	
	var OldPageOnInitialize = ap.page.onInitialize;
	//ap.page.onSubmit = accountClearanceLookup;
	var runningClearanceOnContinue = false;
	var runningClearanceFlag=null;
	var oldSetIPDTRFieldFocus = page.setIPDTRFieldFocus || {};
	ap.page.setIPDTRFieldFocus = cihSetIPDTRFieldFocusWithSubmitCheck;
	/**
	 * Show the multi-results table in the lightbox
	 */
	function showTable() {
		
		// call pre-existing onPaint function if any
		if (typeof oldOnPaint === 'function') {
			oldOnPaint();
		}
		
		// hijack continue button to validate before submitting
		var continueButton = document.getElementById('continueButton');
		
		if (continueButton != null) {
			var accountLookupFlag=ap.page.getField('ShowFlag').getValue();
			if(accountLookupFlag=='400' || accountLookupFlag=='204' || accountLookupFlag=='500' || accountLookupFlag=='401' || accountLookupFlag=='ERROR' ){
				ap.page.getField('ShowFlag').setValue('');
			}
				
			continueButton.onclick = validateBeforeContinue;
		}
		//register zipcode on paint as the field is excluded on load
		if(ap.page.getField('ApplicantMailingZip_US')!=null && !ap.page.getField('ApplicantMailingZip_US').isExcluded()){
			genInfoconditionalIPDTR.genInfoshouldCallIPDTR();
		}
		//register EffectiveDate on paint
		if(ap.page.getField('EffectiveDate')!=null){
			genInfoconditionalIPDTR.effectiveDateIPDTR();
		}
		
		//Applicant name change
		if(ap.page.getField('ApplicantName')!=null){
			genInfoconditionalIPDTR.applicantNameChange();
		}
		
		//Agency name change
		if(ap.page.getField('AgencyName')!=null){
			genInfoconditionalIPDTR.agencyNameChange();
		}
		
		
		//Mailing Address 1
		if(ap.page.getField('ApplicantMailingAddress1')!=null){
			genInfoconditionalIPDTR.applicantMailingAdd1Change();
		}
		//Mailing Address 2
		if(ap.page.getField('ApplicantMailingAddress2')!=null){
			genInfoconditionalIPDTR.applicantMailingAdd2Change();
		}
		//Mailing Address City
		if(ap.page.getField('ApplicantMailingCity')!=null){
			genInfoconditionalIPDTR.applicantMailingCityChange();
		}
		//Mailing Address  State
		if(ap.page.getField('ApplicantMailingState')!=null){
			genInfoconditionalIPDTR.applicantMailingStateChange();
		}
		
		//
		if(ap.page.getField('ApplicantMailingCountry').getValue()=='CA'){
			$("[id^='ApplicantMailingKeepAddressasEntered']").parent().hide();
			ap.page.getField('GenInfoMessage').setValue('');
			ap.page.getField('ApplicantMailingAddressValidationFlag').setValue('');
		}
		// if we have JSON results in field, display dialog
		if(ap.page.getField('ApplicantMailingCountry').getValue()=='USA' && $("#ApplicantMailingAddressValidationFlag").val()=='NOMATCH' || $("#ApplicantMailingAddressValidationFlag").val()=='KEEPADDRESSASENTERED'){
			$("[id^='ApplicantMailingKeepAddressasEntered']").parent().show();
		}else{
			$("[id^='ApplicantMailingKeepAddressasEntered']").parent().hide();
		}
		
		/**
		 * Custom method to set focus on Filter List Primary Business Description.
		 */
		
		if ($('PrimaryBusDescription_labelText')!=null ){
			$( "#PrimaryBusDescription_labelText" ).click(function() {
				  $( "#s2id_autogen1" ).focus();
				});
			
		}
		
		var json = ap.page.getField('GenInfoMultiResultJSON').getValue();
		$('#GenInfoAddressStandardizationHelperMessage').text('');
		$('#GenInfoAddressStandardizationHelperMessage').removeClass('alert alert-info');
		if(ap.page.getField('GenInfoMessage')!=null && !ap.page.getField('GenInfoMessage').isExcluded() && ap.page.getField('GenInfoMessage').getValue()!=''){
			$('#GenInfoAddressStandardizationHelperMessage').text(ap.page.getField('GenInfoMessage').getValue());
			$('#GenInfoAddressStandardizationHelperMessage').addClass('alert alert-info');
		}
		 if (json != '') {
			page.getField('GenInfoMultiResultJSON').setValue('');
			
			var data = $.parseJSON(json);
			if(data.ServiceMessage=='EXACTMATCH' || data.ServiceMessage=='CORRECTED') {
				ap.page.getField('ApplicantMailingAddress1').setValue(data.ApplicantMailingAddress1);
				ap.page.getField('ApplicantMailingAddress2').setValue(data.ApplicantMailingAddress2);
				ap.page.getField('ApplicantMailingCity').setValue(data.ApplicantMailingCity);
				ap.page.getField('ApplicantMailingState').setValue(data.ApplicantMailingState);
				ap.page.getField('ApplicantMailingZip_US').setValue(data.ApplicantMailingZip_US);
				
				ap.page.getField('ApplicantMailingGEOResult').setValue(data.ApplicantMailingGEOResult);
				ap.page.getField('ApplicantMailingGEOPlaceCd').setValue(data.ApplicantMailingGEOPlaceCd);
				ap.page.getField('ApplicantMailingGEOCensusTract').setValue(data.ApplicantMailingGEOCensusTract);
				ap.page.getField('ApplicantMailingGEOCensusBlock').setValue(data.ApplicantMailingGEOCensusBlock);
				ap.page.getField('ApplicantMailingGEOCountyFIPS').setValue(data.ApplicantMailingGEOCountyFIPS);
				ap.page.getField('ApplicantMailingGEOLatitude').setValue(data.ApplicantMailingGEOLatitude);
				
				ap.page.getField('ApplicantMailingGEOLongitude').setValue(data.ApplicantMailingGEOLongitude);
				ap.page.getField('ApplicantMailingGEOCountyName').setValue(data.ApplicantMailingGEOCountyName);
				ap.page.getField('ApplicantMailingGEOSubdivisionCode').setValue(data.ApplicantMailingGEOSubdivisionCode);
				
				$("#ApplicantMailingAddressValidationFlag").val("EXACTMATCH");
				$("[id^='ApplicantMailingKeepAddressasEntered']").parent().hide();
				$('#GenInfoAddressStandardizationHelperMessage').addClass('alert alert-info');
				// Message has been added twice, once to display on screen without refresh, second one is to retain the message so that on refresh the correct message is rendered.
				if(data.ServiceMessage=='EXACTMATCH'){
					$('#GenInfoAddressStandardizationHelperMessage').text('Address has been standardized, please continue.');
					ap.page.getField('GenInfoMessage').setValue('Address has been standardized, please continue.');
				}else{
					$('#GenInfoAddressStandardizationHelperMessage').text('Address has been updated and standardized, please continue.');
					ap.page.getField('GenInfoMessage').setValue('Address has been updated and standardized, please continue.');
				}
								
			}else if (data.ServiceMessage=='NOMATCH'){
				ap.page.getField('ApplicantMailingAddress1').setReadOnly(true);
				ap.page.getField('ApplicantMailingAddress2').setReadOnly(true);
				ap.page.getField('ApplicantMailingCity').setReadOnly(true);
				ap.page.getField('ApplicantMailingState').setReadOnly(true);
				ap.page.getField('ApplicantMailingZip_US').setReadOnly(true);
				$("[id^='ApplicantMailingKeepAddressasEntered']").parent().show();
				$("#ApplicantMailingKeepAddressasEntered").prop("checked", true );
				$("#ApplicantMailingAddressValidationFlag").val("NOMATCH");
				ap.page.getField('ApplicantMailingCountry').setReadOnly(true);
				$('#GenInfoAddressStandardizationHelperMessage').addClass('alert alert-info');
				$('#GenInfoAddressStandardizationHelperMessage').text('Unable to verify the address. To edit, uncheck "Keep address as entered". Please continue.');
				ap.page.getField('GenInfoMessage').setValue('Unable to verify the address. To edit, uncheck "Keep address as entered". Please continue.');
				$('#EffectiveDate').focus();
			}else if(data.ServiceMessage=='ERROR'){
				$("[id^='ApplicantMailingKeepAddressasEntered']").parent().hide();
				$("#ApplicantMailingAddressValidationFlag").val("ERROR");
				$('#GenInfoAddressStandardizationHelperMessage').addClass('alert alert-info');
				$('#GenInfoAddressStandardizationHelperMessage').text('Unable to validate the address at this time, please continue.');
				ap.page.getField('GenInfoMessage').setValue('Unable to validate the address at this time, please continue.');
			}else{

				addess_validaion_lightbox.initialize(data);
				addess_validaion_lightbox.showDialog();
			}
			
			
		}
	}
	function accountClearanceLookup(){
		runningClearanceFlag = ap.page.getField('ShowFlag').getValue();
		var clearanceFieldChangeFlag = ap.page.getField('SPClearnceInputChangeFlag').getValue();
		if(runningClearanceFlag=='' || runningClearanceFlag==null || clearanceFieldChangeFlag=='Y'){
			var acField = page.getField('AccClearanceFieldForIPDTR');
			acField.makeIntraPageDTRRequest();
			runningClearanceOnContinue=true;
			if(clearanceFieldChangeFlag=='Y'){
				ap.page.getField('SPClearnceInputChangeFlag').setValue('EXECUTED');
			}	
			
			return false;
			
		}else{
			return true;
		}
		if (typeof OldPageOnInitialize == "function") {
			OldPageOnInitialize();
		}
	}
	function cihSetIPDTRFieldFocusWithSubmitCheck() {
		if(runningClearanceOnContinue==true)
		{	
			
				openAccountClearanceLightBox();
			
		}
		oldSetIPDTRFieldFocus();
	}
}

/**
 * Define lightbox exit button functionality
 */
function exitSearchDialog() {
	$("#ApplicantMailingAddressValidationFlag").val("UPDATEADDRESS");

	if($("#ApplicantMailingAddressValidationFlag").val()=='NOMATCH' || $("#ApplicantMailingAddressValidationFlag").val()=='KEEPADDRESSASENTERED'){
		$("[id^='ApplicantMailingKeepAddressasEntered']").parent().show();
	}else{
		$("[id^='ApplicantMailingKeepAddressasEntered']").parent().hide();
	}
	addess_validaion_lightbox.hideDialog();	
	
}

/**
 * Define lightbox save button functionality
 */
function saveSearchData(dataArray) {

	// iterate over each array entry, setting the field to the value provided
	dataArray.forEach(function (entry) {
	    console.log(entry);
	    var field = page.getField(entry.uniqueId);
	    field.setValue(entry.value)
	});
	
	// close the lightbox
	addess_validaion_lightbox.hideDialog();
	var tempField = ap.page.getField('ApplicantMailingAddress1');
	tempField.makeIntraPageDTRRequest();
}

function keepAddressEntered(){
	ap.page.getField('ApplicantMailingAddress1').setReadOnly(true);
	ap.page.getField('ApplicantMailingAddress2').setReadOnly(true);
	ap.page.getField('ApplicantMailingCity').setReadOnly(true);
	ap.page.getField('ApplicantMailingState').setReadOnly(true);
	ap.page.getField('ApplicantMailingZip_US').setReadOnly(true);
	ap.page.getField('ApplicantMailingCountry').setReadOnly(true);
	$("[id^='ApplicantMailingKeepAddressasEntered']").parent().show();
	$("#ApplicantMailingKeepAddressasEntered").prop( "checked", true );
	$("#ApplicantMailingAddressValidationFlag").val("KEEPADDRESSASENTERED");
	addess_validaion_lightbox.hideDialog();
}
	/**
	 * Validate that the Keep Address as Entered checkbox is checked
	 * before allowing the user to process changes with Save.
	 * If not checked, we call IPDTR first before Save.
	 */
function validateBeforeContinue(){
	var checkboxField = ap.page.getField('ApplicantMailingKeepAddressasEntered');
	var addressValidationFlag = ap.page.getField('ApplicantMailingAddressValidationFlag');
	var choosenCountry =  ap.page.getField('ApplicantMailingCountry').getValue();
	// call address validation if checkbox not checked
	// just use any of our custom hotfields to trigger IPDTR
	
	if (checkboxField.getValue() != 1 && choosenCountry!="CA" &&
			(addressValidationFlag.getValue()=='KEEPADDRESSASENTERED'|| addressValidationFlag.getValue()=='NOMATCH' ||  addressValidationFlag.getValue()=='UPDATEADDRESS')) {
		ap.consoleInfo('KeepAddressAsEntered is not selected, calling validation service...');
		
		ap.page.getField('ApplicantMailingAddress1').makeIntraPageDTRRequest();
	}
	// if latest call results in setting the checkbox, allow normal Save
	if (checkboxField.getValue() == 1) {
		page.submit('Continue');
	} else if(checkboxField.getValue() != 1 && (addressValidationFlag.getValue()=='EXACTMATCH' || addressValidationFlag.getValue()=='ERROR') ){
		page.submit('Continue');
	}else{
		page.submit('Continue');
	}
}

function openAccountClearanceLightBox(){
	acJson=ap.page.getField('AccClearanceMultiResultJSON').getValue();
	if(acJson!='' && acJson!=null){
		if(acJson=='400' || acJson=='204' || acJson=='500' || acJson=='401' || acJson=='ERROR'){
			runningClearanceOnContinue=false;
			ap.page.getField('ShowFlag').setValue(acJson);
			page.submit('Continue');
		}else{
			var data = $.parseJSON(acJson);
			if(((data.messageCode=='EXACTMATCH_COMBINED' ||data.messageCode=='PARTIALMATCH_COMBINED' )&&data.insideAgencyCount>='1' && data.outsideAgencyCount>='1') || ((data.messageCode=='EXACTMATCH_OUTSIDE' || data.messageCode=='PARTIALMATCH_OUTSIDE')&&data.insideAgencyCount=='0' && data.outsideAgencyCount>='1'))
			{
				ap.page.getField('ShowFlag').setValue(data.messageCode);
				page.submit('Continue');
			}else if((data.messageCode=='EXACTMATCH_AGENCY' || data.messageCode=='PARTIALMATCH_AGENCY' ) && data.insideAgencyCount>='1' && data.outsideAgencyCount=='0'){
				ap.page.getField('ShowFlag').setValue(data.messageCode);
				accountclearancelightbox.initialize(data);
				accountclearancelightbox.showDialog();
			} else if(data.messageCode=='NOMATCH'){
				ap.page.getField('ShowFlag').setValue('NOMATCH');
				page.submit('Continue');
			}
		}
	}
}



function saveAccountSearchData(dataArray)
{
	// iterate over each array entry, setting the field to the value provided
	dataArray.forEach(function (entry) {
	    console.log(entry);
	    var field = page.getField(entry.uniqueId);
	    field.setValue(entry.value)
	});
	
	// close the lightbox
	accountclearancelightbox.hideDialog();
}

function createNewAccount()
{
	ap.page.getField('CreateNewAccountFlag').setValue('Y');
	accountclearancelightbox.hideDialog();	
}
